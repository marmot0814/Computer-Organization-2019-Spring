$date
	Fri Apr 26 20:58:35 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 32 # shamt [31:0] $end
$var wire 32 $ pc_next [31:0] $end
$var wire 32 % pc_curr_plus4_plusShifted2 [31:0] $end
$var wire 32 & pc_curr_plus4 [31:0] $end
$var wire 32 ' pc_curr [31:0] $end
$var wire 32 ( instr [31:0] $end
$var wire 32 ) SE_32bit_shifted [31:0] $end
$var wire 32 * SE_32bit [31:0] $end
$var wire 1 + RegWrite $end
$var wire 1 , RegDst $end
$var wire 32 - RTdata [31:0] $end
$var wire 32 . RSdata [31:0] $end
$var wire 5 / RDaddr [4:0] $end
$var wire 1 0 Extend $end
$var wire 1 1 Branch $end
$var wire 1 2 ALU_zero $end
$var wire 32 3 ALU_src2 [31:0] $end
$var wire 32 4 ALU_src1 [31:0] $end
$var wire 32 5 ALU_result [31:0] $end
$var wire 3 6 ALU_op [2:0] $end
$var wire 1 7 ALUSrc_2 $end
$var wire 1 8 ALUSrc_1 $end
$var wire 4 9 ALUCtrl [3:0] $end
$scope module AC $end
$var wire 6 : funct_i [5:0] $end
$var wire 3 ; ALUOp_i [2:0] $end
$var reg 4 < ALUCtrl_o [3:0] $end
$var reg 1 8 ALUSrc_1_o $end
$var reg 1 0 Extend_o $end
$upscope $end
$scope module ALU $end
$var wire 4 = ctrl_i [3:0] $end
$var wire 32 > src2_i [31:0] $end
$var wire 32 ? src1_i [31:0] $end
$var reg 32 @ result_o [31:0] $end
$var reg 1 2 zero_o $end
$upscope $end
$scope module Adder1 $end
$var wire 32 A src2_i [31:0] $end
$var wire 32 B sum_o [31:0] $end
$var wire 32 C src1_i [31:0] $end
$upscope $end
$scope module Adder2 $end
$var wire 32 D src1_i [31:0] $end
$var wire 32 E sum_o [31:0] $end
$var wire 32 F src2_i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 6 G instr_op_i [5:0] $end
$var reg 1 7 ALUSrc_2_o $end
$var reg 3 H ALU_op_o [2:0] $end
$var reg 1 1 Branch_o $end
$var reg 1 , RegDst_o $end
$var reg 1 + RegWrite_o $end
$upscope $end
$scope module IM $end
$var wire 32 I pc_addr_i [31:0] $end
$var reg 32 J instr_o [31:0] $end
$var integer 32 K i [31:0] $end
$upscope $end
$scope module Mux_ALUSrc_1 $end
$var wire 32 L data1_i [31:0] $end
$var wire 1 8 select_i $end
$var wire 32 M data0_i [31:0] $end
$var reg 32 N data_o [31:0] $end
$upscope $end
$scope module Mux_ALUSrc_2 $end
$var wire 1 7 select_i $end
$var wire 32 O data1_i [31:0] $end
$var wire 32 P data0_i [31:0] $end
$var reg 32 Q data_o [31:0] $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 R data0_i [31:0] $end
$var wire 32 S data1_i [31:0] $end
$var wire 1 T select_i $end
$var reg 32 U data_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 V data0_i [4:0] $end
$var wire 5 W data1_i [4:0] $end
$var wire 1 , select_i $end
$var reg 5 X data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 Y pc_in_i [31:0] $end
$var wire 1 " rst_i $end
$var reg 32 Z pc_out_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 [ RDaddr_i [4:0] $end
$var wire 32 \ RDdata_i [31:0] $end
$var wire 5 ] RSaddr_i [4:0] $end
$var wire 32 ^ RSdata_o [31:0] $end
$var wire 5 _ RTaddr_i [4:0] $end
$var wire 32 ` RTdata_o [31:0] $end
$var wire 1 + RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$upscope $end
$scope module SE $end
$var wire 1 0 Extend_i $end
$var wire 16 a data_i [15:0] $end
$var reg 32 b data_o [31:0] $end
$upscope $end
$scope module Shifter $end
$var wire 32 c data_i [31:0] $end
$var wire 32 d data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 e \Reg_File[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 f \Reg_File[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 g \Reg_File[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 h \Reg_File[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 i \Reg_File[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 j \Reg_File[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 k \Reg_File[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 l \Reg_File[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 m \Reg_File[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 n \Reg_File[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 o \Reg_File[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 p \Reg_File[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 q \Reg_File[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 r \Reg_File[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 s \Reg_File[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 t \Reg_File[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 u \Reg_File[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 v \Reg_File[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 w \Reg_File[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 x \Reg_File[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 y \Reg_File[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 z \Reg_File[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 { \Reg_File[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 | \Reg_File[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 } \Reg_File[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 ~ \Reg_File[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 !" \Reg_File[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 "" \Reg_File[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 #" \Reg_File[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 $" \Reg_File[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 %" \Reg_File[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module RF $end
$var reg 32 &" \Reg_File[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 '" \Instr_Mem[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 (" \Instr_Mem[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 )" \Instr_Mem[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 *" \Instr_Mem[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 +" \Instr_Mem[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 ," \Instr_Mem[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 -" \Instr_Mem[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 ." \Instr_Mem[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 /" \Instr_Mem[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 0" \Instr_Mem[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 1" \Instr_Mem[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 2" \Instr_Mem[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 3" \Instr_Mem[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 4" \Instr_Mem[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 5" \Instr_Mem[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 6" \Instr_Mem[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 7" \Instr_Mem[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 8" \Instr_Mem[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 9" \Instr_Mem[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 :" \Instr_Mem[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 ;" \Instr_Mem[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 <" \Instr_Mem[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 =" \Instr_Mem[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 >" \Instr_Mem[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 ?" \Instr_Mem[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 @" \Instr_Mem[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 A" \Instr_Mem[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 B" \Instr_Mem[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 C" \Instr_Mem[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 D" \Instr_Mem[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 E" \Instr_Mem[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module TestBench $end
$scope module cpu $end
$scope module IM $end
$var reg 32 F" \Instr_Mem[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b10101010000001111111111111101 ,"
b100001010010101111111111111111 +"
b1010010110101100000000111 *"
b10110101101000000011 )"
b111100000010111111111111110110 ("
b110100000010100000000000000011 '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx00 d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
xT
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
b0xxxxx L
b100000 K
bx J
bx I
bx H
bx G
bx00 F
bx E
bx D
bx C
bx B
b100 A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
x8
x7
bx 6
bx 5
bx 4
bx 3
x2
x1
x0
bx /
bx .
bx -
x,
x+
bx *
bx00 )
bx (
bx '
bx &
bx %
bx $
b0xxxxx #
0"
0!
$end
#5
02
b11 5
b11 @
b11 \
b100 $
b100 U
b100 Y
b10000 %
b10000 E
b10000 S
b1100 )
b1100 F
b1100 d
b0 4
b0 ?
b0 N
0T
b1010 /
b1010 X
b1010 [
b11 3
b11 >
b11 Q
b11 *
b11 O
b11 b
b11 c
10
b1 9
b1 <
b1 =
08
01
0,
17
b1 6
b1 ;
b1 H
1+
b11 a
b11 :
b1101 G
b0 -
b0 P
b0 `
b1010 _
b0 .
b0 M
b0 ^
b0 ]
b0 W
b1010 V
b0 #
b0 L
b110100000010100000000000000011 (
b110100000010100000000000000011 J
b100 &
b100 B
b100 D
b100 R
b0 '
b0 C
b0 I
b0 Z
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
1!
#10
b11 o
b11 -
b11 P
b11 `
0!
1"
#15
b11111111111101100000000000000000 5
b11111111111101100000000000000000 @
b11111111111101100000000000000000 \
b11111111111111111111111111011000 )
b11111111111111111111111111011000 F
b11111111111111111111111111011000 d
b11111111111111111111111111110110 3
b11111111111111111111111111110110 >
b11111111111111111111111111110110 Q
b11111111111111111111111111110110 *
b11111111111111111111111111110110 O
b11111111111111111111111111110110 b
b11111111111111111111111111110110 c
b101 9
b101 <
b101 =
b101 6
b101 ;
b101 H
b1011 /
b1011 X
b1011 [
b1111111111110110 a
b110110 :
b1111 G
b0 -
b0 P
b0 `
b1011 _
b11111 W
b1011 V
b11111 #
b11111 L
b1000 $
b1000 U
b1000 Y
b111100000010111111111111110110 (
b111100000010111111111111110110 J
b11111111111111111111111111100000 %
b11111111111111111111111111100000 E
b11111111111111111111111111100000 S
b1000 &
b1000 B
b1000 D
b1000 R
b100 '
b100 C
b100 I
b100 Z
b11 o
1!
#20
0!
#25
b11111111111111111111011000000000 5
b11111111111111111111011000000000 @
b11111111111111111111011000000000 \
b10110100000001100 )
b10110100000001100 F
b10110100000001100 d
b1000 4
b1000 ?
b1000 N
b11111111111101100000000000000000 3
b11111111111101100000000000000000 >
b11111111111101100000000000000000 Q
b101101000000011 *
b101101000000011 O
b101101000000011 b
b101101000000011 c
x0
b1000 9
b1000 <
b1000 =
18
1,
07
b0 6
b0 ;
b0 H
b101101000000011 a
b11 :
b0 G
b1011 W
b1000 #
b1000 L
b1100 $
b1100 U
b1100 Y
b10110101101000000011 (
b10110101101000000011 J
b10110100000011000 %
b10110100000011000 E
b10110100000011000 S
b1100 &
b1100 B
b1100 D
b1100 R
b1000 '
b1000 C
b1000 I
b1000 Z
b11111111111101100000000000000000 p
b11111111111101100000000000000000 -
b11111111111101100000000000000000 P
b11111111111101100000000000000000 `
1!
#30
0!
#35
b11111111111111111111111011000000 5
b11111111111111111111111011000000 @
b11111111111111111111111011000000 \
b10110000000011100 )
b10110000000011100 F
b10110000000011100 d
b101100000000111 *
b101100000000111 O
b101100000000111 b
b101100000000111 c
b1001 9
b1001 <
b1001 =
08
b11 4
b11 ?
b11 N
b101100000000111 a
b111 :
b11 .
b11 M
b11 ^
b1010 ]
b0 #
b0 L
b10000 $
b10000 U
b10000 Y
b1010010110101100000000111 (
b1010010110101100000000111 J
b11111111111111111111011000000000 3
b11111111111111111111011000000000 >
b11111111111111111111011000000000 Q
b10110000000101100 %
b10110000000101100 E
b10110000000101100 S
b10000 &
b10000 B
b10000 D
b10000 R
b1100 '
b1100 C
b1100 I
b1100 Z
b11111111111111111111011000000000 p
b11111111111111111111011000000000 -
b11111111111111111111011000000000 P
b11111111111111111111011000000000 `
1!
#40
0!
#45
b10 5
b10 @
b10 \
b11111111111111111111111111111100 )
b11111111111111111111111111111100 F
b11111111111111111111111111111100 d
b11111111111111111111111111111111 *
b11111111111111111111111111111111 O
b11111111111111111111111111111111 b
b11111111111111111111111111111111 c
10
b10 9
b10 <
b10 =
0,
17
b10 6
b10 ;
b10 H
b1010 /
b1010 X
b1010 [
b1111111111111111 a
b111111 :
b1000 G
b1010 _
b11111 W
b1010 V
b11111 #
b11111 L
b10100 $
b10100 U
b10100 Y
b100001010010101111111111111111 (
b100001010010101111111111111111 J
b11111111111111111111111111111111 3
b11111111111111111111111111111111 >
b11111111111111111111111111111111 Q
b10000 %
b10000 E
b10000 S
b10100 &
b10100 B
b10100 D
b10100 R
b10000 '
b10000 C
b10000 I
b10000 Z
b11111111111111111111111011000000 p
b11 -
b11 P
b11 `
1!
#50
0!
#55
1T
12
b0 5
b0 @
b0 \
b11111111111111111111111111110100 )
b11111111111111111111111111110100 F
b11111111111111111111111111110100 d
b0 3
b0 >
b0 Q
b11111111111111111111111111111101 *
b11111111111111111111111111111101 O
b11111111111111111111111111111101 b
b11111111111111111111111111111101 c
b100 9
b100 <
b100 =
11
x,
07
b100 6
b100 ;
b100 H
0+
b0 /
b0 X
b0 [
b1111111111111101 a
b111101 :
b101 G
b0 _
b0 V
b1100 $
b1100 U
b1100 Y
b10101010000001111111111111101 (
b10101010000001111111111111101 J
b10 4
b10 ?
b10 N
b1100 %
b1100 E
b1100 S
b11000 &
b11000 B
b11000 D
b11000 R
b10100 '
b10100 C
b10100 I
b10100 Z
b10 o
b10 .
b10 M
b10 ^
b0 -
b0 P
b0 `
1!
#60
0!
#65
02
b11111111111111111111111110110000 5
b11111111111111111111111110110000 @
b11111111111111111111111110110000 \
b10110000000011100 )
b10110000000011100 F
b10110000000011100 d
0T
b1011 /
b1011 X
b1011 [
b101100000000111 *
b101100000000111 O
b101100000000111 b
b101100000000111 c
x0
b1001 9
b1001 <
b1001 =
01
1,
b0 6
b0 ;
b0 H
1+
b11111111111111111111111011000000 3
b11111111111111111111111011000000 >
b11111111111111111111111011000000 Q
b101100000000111 a
b111 :
b0 G
b11111111111111111111111011000000 -
b11111111111111111111111011000000 P
b11111111111111111111111011000000 `
b1011 _
b1011 W
b1011 V
b0 #
b0 L
b10000 $
b10000 U
b10000 Y
b1010010110101100000000111 (
b1010010110101100000000111 J
b10110000000101100 %
b10110000000101100 E
b10110000000101100 S
b10000 &
b10000 B
b10000 D
b10000 R
b1100 '
b1100 C
b1100 I
b1100 Z
b0 e
1!
#70
0!
#75
b1 5
b1 @
b1 \
b11111111111111111111111111111100 )
b11111111111111111111111111111100 F
b11111111111111111111111111111100 d
b11111111111111111111111111111111 *
b11111111111111111111111111111111 O
b11111111111111111111111111111111 b
b11111111111111111111111111111111 c
10
b10 9
b10 <
b10 =
0,
17
b10 6
b10 ;
b10 H
b1010 /
b1010 X
b1010 [
b1111111111111111 a
b111111 :
b1000 G
b1010 _
b11111 W
b1010 V
b11111 #
b11111 L
b10100 $
b10100 U
b10100 Y
b100001010010101111111111111111 (
b100001010010101111111111111111 J
b11111111111111111111111111111111 3
b11111111111111111111111111111111 >
b11111111111111111111111111111111 Q
b10000 %
b10000 E
b10000 S
b10100 &
b10100 B
b10100 D
b10100 R
b10000 '
b10000 C
b10000 I
b10000 Z
b11111111111111111111111110110000 p
b10 -
b10 P
b10 `
1!
#80
0!
#85
1T
12
b0 5
b0 @
b0 \
b11111111111111111111111111110100 )
b11111111111111111111111111110100 F
b11111111111111111111111111110100 d
b0 3
b0 >
b0 Q
b11111111111111111111111111111101 *
b11111111111111111111111111111101 O
b11111111111111111111111111111101 b
b11111111111111111111111111111101 c
b100 9
b100 <
b100 =
11
x,
07
b100 6
b100 ;
b100 H
0+
b0 /
b0 X
b0 [
b1111111111111101 a
b111101 :
b101 G
b0 _
b0 V
b1100 $
b1100 U
b1100 Y
b10101010000001111111111111101 (
b10101010000001111111111111101 J
b1 4
b1 ?
b1 N
b1100 %
b1100 E
b1100 S
b11000 &
b11000 B
b11000 D
b11000 R
b10100 '
b10100 C
b10100 I
b10100 Z
b1 o
b1 .
b1 M
b1 ^
b0 -
b0 P
b0 `
1!
#90
0!
#95
02
b11111111111111111111111111011000 5
b11111111111111111111111111011000 @
b11111111111111111111111111011000 \
b10110000000011100 )
b10110000000011100 F
b10110000000011100 d
0T
b1011 /
b1011 X
b1011 [
b101100000000111 *
b101100000000111 O
b101100000000111 b
b101100000000111 c
x0
b1001 9
b1001 <
b1001 =
01
1,
b0 6
b0 ;
b0 H
1+
b11111111111111111111111110110000 3
b11111111111111111111111110110000 >
b11111111111111111111111110110000 Q
b101100000000111 a
b111 :
b0 G
b11111111111111111111111110110000 -
b11111111111111111111111110110000 P
b11111111111111111111111110110000 `
b1011 _
b1011 W
b1011 V
b0 #
b0 L
b10000 $
b10000 U
b10000 Y
b1010010110101100000000111 (
b1010010110101100000000111 J
b10110000000101100 %
b10110000000101100 E
b10110000000101100 S
b10000 &
b10000 B
b10000 D
b10000 R
b1100 '
b1100 C
b1100 I
b1100 Z
b0 e
1!
#100
0!
#105
12
b0 5
b0 @
b0 \
b11111111111111111111111111111100 )
b11111111111111111111111111111100 F
b11111111111111111111111111111100 d
b11111111111111111111111111111111 *
b11111111111111111111111111111111 O
b11111111111111111111111111111111 b
b11111111111111111111111111111111 c
10
b10 9
b10 <
b10 =
0,
17
b10 6
b10 ;
b10 H
b1010 /
b1010 X
b1010 [
b1111111111111111 a
b111111 :
b1000 G
b1010 _
b11111 W
b1010 V
b11111 #
b11111 L
b10100 $
b10100 U
b10100 Y
b100001010010101111111111111111 (
b100001010010101111111111111111 J
b11111111111111111111111111111111 3
b11111111111111111111111111111111 >
b11111111111111111111111111111111 Q
b10000 %
b10000 E
b10000 S
b10100 &
b10100 B
b10100 D
b10100 R
b10000 '
b10000 C
b10000 I
b10000 Z
b11111111111111111111111111011000 p
b1 -
b1 P
b1 `
1!
#110
0!
#115
02
b1 5
b1 @
b1 \
b11111111111111111111111111110100 )
b11111111111111111111111111110100 F
b11111111111111111111111111110100 d
0T
b0 3
b0 >
b0 Q
b11111111111111111111111111111101 *
b11111111111111111111111111111101 O
b11111111111111111111111111111101 b
b11111111111111111111111111111101 c
b100 9
b100 <
b100 =
11
x,
07
b100 6
b100 ;
b100 H
0+
b0 /
b0 X
b0 [
b1111111111111101 a
b111101 :
b101 G
b0 _
b0 V
b11000 $
b11000 U
b11000 Y
b10101010000001111111111111101 (
b10101010000001111111111111101 J
b0 4
b0 ?
b0 N
b1100 %
b1100 E
b1100 S
b11000 &
b11000 B
b11000 D
b11000 R
b10100 '
b10100 C
b10100 I
b10100 Z
b0 o
b0 .
b0 M
b0 ^
b0 -
b0 P
b0 `
1!
#120
0!
#125
b0 )
b0 F
b0 d
b0 *
b0 O
b0 b
b0 c
01
1,
b0 6
b0 ;
b0 H
1+
b0 a
b0 :
b0 G
b0 ]
b0 W
b0 #
b0 L
b11100 $
b11100 U
b11100 Y
b0 (
b0 J
b11100 %
b11100 E
b11100 S
b11100 &
b11100 B
b11100 D
b11100 R
b11000 '
b11000 C
b11000 I
b11000 Z
b0 e
1!
#130
0!
#135
b100000 $
b100000 U
b100000 Y
b1 4
b1 ?
b1 N
b1 3
b1 >
b1 Q
b100000 %
b100000 E
b100000 S
b100000 &
b100000 B
b100000 D
b100000 R
b11100 '
b11100 C
b11100 I
b11100 Z
b1 e
b1 .
b1 M
b1 ^
b1 -
b1 P
b1 `
1!
#140
0!
#145
b100100 $
b100100 U
b100100 Y
b100100 %
b100100 E
b100100 S
b100100 &
b100100 B
b100100 D
b100100 R
b100000 '
b100000 C
b100000 I
b100000 Z
b1 e
1!
#150
0!
#155
b101000 $
b101000 U
b101000 Y
b101000 %
b101000 E
b101000 S
b101000 &
b101000 B
b101000 D
b101000 R
b100100 '
b100100 C
b100100 I
b100100 Z
b1 e
1!
#160
0!
#165
b101100 $
b101100 U
b101100 Y
b101100 %
b101100 E
b101100 S
b101100 &
b101100 B
b101100 D
b101100 R
b101000 '
b101000 C
b101000 I
b101000 Z
b1 e
1!
#170
0!
#175
b110000 $
b110000 U
b110000 Y
b110000 %
b110000 E
b110000 S
b110000 &
b110000 B
b110000 D
b110000 R
b101100 '
b101100 C
b101100 I
b101100 Z
b1 e
1!
#180
0!
#185
b110100 $
b110100 U
b110100 Y
b110100 %
b110100 E
b110100 S
b110100 &
b110100 B
b110100 D
b110100 R
b110000 '
b110000 C
b110000 I
b110000 Z
b1 e
1!
#190
0!
#195
b111000 $
b111000 U
b111000 Y
b111000 %
b111000 E
b111000 S
b111000 &
b111000 B
b111000 D
b111000 R
b110100 '
b110100 C
b110100 I
b110100 Z
b1 e
1!
#200
0!
#205
b111100 $
b111100 U
b111100 Y
b111100 %
b111100 E
b111100 S
b111100 &
b111100 B
b111100 D
b111100 R
b111000 '
b111000 C
b111000 I
b111000 Z
b1 e
1!
#210
0!
#215
b1000000 $
b1000000 U
b1000000 Y
b1000000 %
b1000000 E
b1000000 S
b1000000 &
b1000000 B
b1000000 D
b1000000 R
b111100 '
b111100 C
b111100 I
b111100 Z
b1 e
1!
#220
0!
#225
b1000100 $
b1000100 U
b1000100 Y
b1000100 %
b1000100 E
b1000100 S
b1000100 &
b1000100 B
b1000100 D
b1000100 R
b1000000 '
b1000000 C
b1000000 I
b1000000 Z
b1 e
1!
#230
0!
#235
b1001000 $
b1001000 U
b1001000 Y
b1001000 %
b1001000 E
b1001000 S
b1001000 &
b1001000 B
b1001000 D
b1001000 R
b1000100 '
b1000100 C
b1000100 I
b1000100 Z
b1 e
1!
#240
0!
#245
b1001100 $
b1001100 U
b1001100 Y
b1001100 %
b1001100 E
b1001100 S
b1001100 &
b1001100 B
b1001100 D
b1001100 R
b1001000 '
b1001000 C
b1001000 I
b1001000 Z
b1 e
1!
#250
0!
#255
b1010000 $
b1010000 U
b1010000 Y
b1010000 %
b1010000 E
b1010000 S
b1010000 &
b1010000 B
b1010000 D
b1010000 R
b1001100 '
b1001100 C
b1001100 I
b1001100 Z
b1 e
1!
#260
0!
